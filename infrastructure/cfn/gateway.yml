AWSTemplateFormatVersion: 2010-09-09
Description: ECS Tasks, Services and resources for the  Gateway Service
Parameters:
  VpcStack:
    Type: String
    Description: The name of the VPC Stack which provides network services to this ECS cluster
    
  EcsClusterStack:
    Type: String
    Description: The name of the Stach which deploys the ECS Cluster used by the Services in this stack
    
  GatewayImage:
    Type: String      
    Description: The Docker Image used to deploy the Gateway Tasks
    Default: 'gateway:latest'
    
  GatewayZone:
    Type: String
    Description: The DNS Zone used for tis Gateway
    Default: 'desilva.id.au.'    
    
Resources:
  GatewayLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Fn::ImportValue: !Sub '${EcsClusterStack}-ECSSecGroup'
      Subnets:
        - Fn::ImportValue: !Sub '${VpcStack}-Dmz0'
        - Fn::ImportValue: !Sub '${VpcStack}-Dmz1'
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      # NOTE: this load balancer needs to store it's logs in s3. Not implemented 
      #       as it is overkill for this assignment    

  GatewayTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 8000
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'false'
      UnhealthyThresholdCount: '2'
      VpcId:
        Fn::ImportValue: !Sub '${VpcStack}-VpcId'

  GatewayListener:
    DependsOn:
      - GatewayLoadBalancer
      - GatewayTargetGroup
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref GatewayTargetGroup
      LoadBalancerArn: !Ref GatewayLoadBalancer
      Port: '80'
      Protocol: HTTP

  GatewayListenerRule:
    DependsOn:
      - GatewayListener
      - GatewayDNS
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref GatewayListener
      Priority: 2
      Actions:
        - TargetGroupArn: !Ref GatewayTargetGroup
          Type: forward
      Conditions:
        - Field: host-header
          Values:
            - !Ref GatewayDNS

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      # Add any task specific policies here

  GatewayTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: bridge
      ContainerDefinitions:
        -
          Name: gateway
          PortMappings:
            -
              ContainerPort: 8000
          Memory: 128    
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Sub '${AWS::StackName}-gateway'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${GatewayImage}'

  GatewayService:
    DependsOn:
      - GatewayListener
      - GatewayTask
    Type: "AWS::ECS::Service"
    Properties:
      Cluster:
        Fn::ImportValue: !Sub '${EcsClusterStack}-ECSClusterArn'
      DesiredCount: 0
      HealthCheckGracePeriodSeconds: 60
      LaunchType: 'EC2'
      LoadBalancers:
        - TargetGroupArn: !Ref GatewayTargetGroup
          ContainerName: gateway
          ContainerPort: 8000
      TaskDefinition: !Ref GatewayTask

  GatewayDNS:
    DependsOn:
      - GatewayLoadBalancer
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref GatewayZone
      Comment: Domain Name for the Gateway
      Name: !Sub 'gateway.${GatewayZone}'
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt 'GatewayLoadBalancer.CanonicalHostedZoneID'
        DNSName: !GetAtt 'GatewayLoadBalancer.DNSName'
